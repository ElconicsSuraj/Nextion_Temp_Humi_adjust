
#include "Nextion.h"
uint32_t val_t, val_h ;
#include "DHT.h"
#define DHTPIN 5     // what digital pin we're connected to

// Uncomment whatever type you're using!
//#define DHTTYPE DHT11   // DHT 11
#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

// Initialize DHT sensor.
DHT dht(DHTPIN, DHTTYPE);

// LED pins
const int Heater = 13;
const int Mist = 12;

// Declare your Nextion objects - Example (page id = 0, component id = 1, component name = "b0")
//NexText tState = NexText(0, 2, "tState");
//NexButton bOn = NexButton(0, 3, "bOn");
//NexButton bOff = NexButton(0, 4, "bOff");

NexText tTempC = NexText(1, 3, "tTempC"); // Text
NexText tTempF = NexText(1, 4, "tTempF"); // Text;
NexButton bUpdate = NexButton(1, 5, "bUpdate"); // button
NexSlider h0 = NexSlider(1, 6, "h0");
NexSlider h1 = NexSlider(1, 7, "h1"); // Humidity
NexText tSlider = NexText(1, 8, "tSlider");
NexText hSlider = NexText(1, 9, "hSlider");


//NexProgressBar jHumidity = NexProgressBar(0, 9, "jHumidity"); // progress bar
//NexText tHumidity = NexText(0, 8, "tHumidity"); // text


// Register a button object to the touch event list.
NexTouch *nex_listen_list[] = {
  //  &bOn,
  //  &bOff,
  &h0,
  &h1,
  &bUpdate,
  NULL
};


/*
   Slider h0 component pop callback function.
   When the slider is released, the LED brightness changes and the slider text changes.
*/
void h0PopCallback(void *ptr) {
  uint32_t number = 0;
  char temp[10] = {0};
  // change text with the current slider value
  h0.getValue(&number);
  utoa(number, temp, 10);
  tSlider.setText(temp);
  val_t = number;

}

void h1PopCallback(void *ptr) {
  uint32_t number_h = 0;
  char humi[10] = {0};
  // change text with the current slider value
  h1.getValue(&number_h);
  utoa(number_h, humi, 10);
  hSlider.setText(humi);
  // change LED brightness
  // analogWrite(led2, number_h);
  val_h = number_h;

}

/*
   Button bUpdate component pop callback function.
   When the UPDATE button is released, the temperature and humidity readings are updated.
*/
void bUpdatePopCallback(void *ptr) {
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    return;
  }
  // Update temperature in Celsius
  static char temperatureCTemp[6];
  dtostrf(t, 6, 2, temperatureCTemp);
  tTempC.setText(temperatureCTemp);

  // Update humidity percentage text and progress bar
  char hTemp[10] = {0};
  utoa(int(h), hTemp, 10);
  //tHumidity.setText(hTemp);
  //jHumidity.setValue(int(h));

  // Update temperature in Fahrenheit
  static char temperatureFTemp[6];
  dtostrf(f, 6, 2, temperatureFTemp);
  tTempF.setText(temperatureFTemp);
}

void setup(void) {
  dht.begin();
  digitalWrite(13, LOW);
  Serial.begin(9600);

  // You might need to change NexConfig.h file in your ITEADLIB_Arduino_Nextion folder
  // Set the baudrate which is for debug and communicate with Nextion screen
  nexInit();

  h0.attachPop(h0PopCallback);
  h1.attachPop(h1PopCallback);
  bUpdate.attachPop(bUpdatePopCallback, &bUpdate);

  // Set LEDs as outputs
  pinMode(Heater, OUTPUT);
  pinMode(Mist, OUTPUT);
}

void loop(void) {
  /*
     When a pop or push event occured every time,
     the corresponding component[right page id and component id] in touch event list will be asked.
  */
  nexLoop(nex_listen_list);
  //Serial.print("Value : ");
  // Serial.println(val);
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  if (val_t > t)
  {

    //Serial.println("Motor On");
    digitalWrite(Heater, HIGH);
  }

  else if (val_t < t)
  {

    //Serial.println("Motor On");
    digitalWrite(Heater, LOW);
  }

  if (val_h > h)
  {

    //Serial.println("Motor On");
    digitalWrite(Mist, HIGH);
  }

  else if (val_h < h)
  {

    //Serial.println("Motor On");
    digitalWrite(Mist, LOW);
  }

}
